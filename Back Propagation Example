import numpy as np
import matplotlib.pyplot as plt

X = np.array([[0,0], [0,1], [1,0], [1,1]])
y = np.array([[0], [1], [1], [0]])
 # Sigmoid & Derivative
sigmoid = lambda x: 1 / (1 + np.exp(-x))
sigmoid_derivative = lambda x: x * (1- x)
 # Initialize weights
np.random.seed(0)
w1 = np.random.randn(2, 2)
b1 = np.zeros((1, 2))
w2 = np.random.randn(2, 1)
b2 = np.zeros((1, 1))
 # Training loop
for epoch in range(10000):
 # Forward pass
 z1 = X.dot(w1) + b1
 a1 = sigmoid(z1)
 z2 = a1.dot(w2) + b2
 a2 = sigmoid(z2)
 # Backprop
 error = a2- y
 d_a2 = error * sigmoid_derivative(a2)
 d_a1 = d_a2.dot(w2.T) * sigmoid_derivative(a1)
 # Update weights
 w2-= a1.T.dot(d_a2) * 0.1
 b2-= np.sum(d_a2, axis=0, keepdims=True) * 0.1
 w1-= X.T.dot(d_a1) * 0.1
 b1-= np.sum(d_a1, axis=0, keepdims=True) * 0.1
